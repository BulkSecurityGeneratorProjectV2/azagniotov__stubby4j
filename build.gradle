// vim: ft=groovy
import org.kt3k.gradle.plugin.coveralls.domain.CoberturaSourceReportFactory

ext.coberturaSourceReportFactory = new CoberturaSourceReportFactory()
project(':').ext.map = [:]

defaultTasks 'clean', 'build', 'allTestReport'
description = 'Gradle configuration for stubby4j'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.4'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    project.buildDir = 'target'
    if (project.name != 'main') {
        apply from: "$rootDir/conf/gradle/console.gradle"
    }
}

apply from: "$rootDir/conf/gradle/ides.gradle"

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

subprojects {
    subproject ->
        repositories {
            mavenLocal()
            mavenCentral()
            jcenter()
        }
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
        [compileJava]*.options*.compilerArgs = [
                "-Xlint:-varargs", "-Xlint:cast", "-Xlint:classfile",
                "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
                "-Xlint:overrides", "-Xlint:path", "-Xlint:processing",
                "-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
                "-Xlint:-unchecked", "-Xlint:-options"]
        apply from: "$rootDir/conf/gradle/dependency.gradle"
}

task allTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/all")
    reportOn subprojects*.test
    doLast {
        def total = 0
        def failure = 0
        def moduleTabs = "\t";
        def prefixSpace = "      ";
        def prefixDots = ":::::";
        def hr = prefixSpace + "::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::";
        println ""
        println hr

        for (testProjectName in project(':').ext.map) {
            total += testProjectName.value['total']
            failure += testProjectName.value['failure']
            println prefixSpace + prefixDots + "  " + testProjectName.key +
                    " (failed: " + testProjectName.value['failure'] + ", passed: " + testProjectName.value['success'] + ", total: " + testProjectName.value['total'] + ")"
            for (testClassName in testProjectName.value) {
                if (testClassName.key == 'total' || testClassName.key == 'success' || testClassName.key == 'failure') {
                    continue;
                }
                println prefixSpace + prefixDots + "    " + moduleTabs + testClassName.key +
                        " (" + testClassName.value['success'] + "/" + testClassName.value['total'] + ")"
            }
            println hr
        }
        println prefixSpace + prefixDots + "                  Total tests executed in $stubbyProjectName: " + total
        println hr
        if (failure > 0) {
            throw new GradleException(failure + " TESTS FAILED!!!")
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
