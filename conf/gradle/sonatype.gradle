apply plugin: 'com.bmuschko.nexus'

def dependencies = configurations.compile.resolve().findAll { file ->
   return !file.name.contains("servlet-api") && !file.name.contains("-sources")
}

project.ext.projectManifest = manifest {
   def manifestClasspath = dependencies.collect { it.getName() }.join(',')
   attributes  'Main-Class': 'by.stub.Main',
               'Package': 'by.stub',
               'Class-Path': manifestClasspath,
               'Implementation-Title': "${stubbyProjectName}",
               'Implementation-Version': "${version}",
               'Implementation-Vendor' : 'Alexander Zagniotov',
               'Built-By': 'Alexander Zagniotov',
               'Built-Date': new Date().toString(),
               'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
               'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
}

jar {
   description = 'Creates a shaded/uberjar/fatjar of stubby4j'
   archiveName = "${stubbyProjectName}-${version}.jar"
   manifest = project.ext.projectManifest
   from sourceSets.main.output

   from (dependencies.collect { zipTree(it) }) {
      exclude 'META-INF/*.SF'
      exclude 'META-INF/*.DSA'
      exclude 'META-INF/*.RSA'
      exclude 'META-INF/*.INF'
      exclude 'META-INF/*.inf'
   }
   doLast {
      println ":" + name + " Packaged the following dependencies: " + dependencies.collect { File file -> file.name }
   }
}

def doSign = !"${version}".contains('SNAPSHOT')
if (!doSign) {
   println ""
   println ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
   println ":::     ATTENTION: Latest development version is ${version}     :::"
   println ":::         Remove the '-SNAPSHOT' before signing artifacts         :::"
   println ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
   println ""
   return
}

extraArchive {
   sources = true
   tests = false
   javadoc = true
}

task skinnyJar(type: Jar) {
   description = 'Creates a skinny/no-dependencies of stubby4j'
   baseName = "${stubbyProjectName}"
   version = "${version}"
   classifier = "no-dependencies"
   extension = "jar"
   from sourceSets.main.output
   manifest = project.ext.projectManifest

   doLast {
      println ":" + name + " Packaged classes for skinny JARs from: " + sourceSets.main.output.classesDir
   }
}

artifacts {
   archives skinnyJar
}

uploadArchives {
   repositories {
      mavenDeployer {

         def ascPom = addFilter('asc') {artifact, file -> artifact.ext == "asc" }  
         ascPom.version = "$version"
         ascPom.artifactId = "$stubbyProjectName"
         ascPom.groupId = "$stubbyProjectGroup"
 
         def jarPom = addFilter('jar') {artifact, file -> artifact.ext == "jar" }
         jarPom.version = "$version"
         jarPom.artifactId = "$stubbyProjectName"
         jarPom.groupId = "$stubbyProjectGroup"
         
         def poms = [jarPom, ascPom]

         poms.each {
            pom ->
            pom.project {
               name 'stubby4j'
               description 'A stub HTTP server written in Java with embedded Jetty server.'
               url 'https://github.com/azagniotov/stubby4j'
               inceptionYear '2012'
               packaging 'jar'

               scm {
                  url 'https://github.com/azagniotov/stubby4j'
                  connection 'scm:https://azagniotov@github.com/azagniotov/stubby4j.git'
                  developerConnection 'scm:git://github.com/azagniotov/stubby4j.git'
               }

               licenses {
                  license {
                      name 'The Apache Software License, Version 2.0'
                      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                      distribution 'repo'
                  }
               }

               developers {
                  developer {
                      id 'azagniotov'
                      name 'Alexander Zagniotov'
                      email 'azagniotov@gmail.com'
                  }
               }
            }
         }
      }
   }
}
